// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: queries.sql

package sqlc

import (
	"context"
	"time"
)

const createOhlcv = `-- name: CreateOhlcv :one
INSERT INTO ohlcv (Instrument, Epoch, Open, High, Low, Close, Volume, Number)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING instrument, epoch, open, high, low, close, volume, number
`

type CreateOhlcvParams struct {
	Instrument int64
	Epoch      time.Time
	Open       string
	High       string
	Low        string
	Close      string
	Volume     string
	Number     int64
}

func (q *Queries) CreateOhlcv(ctx context.Context, arg CreateOhlcvParams) (Ohlcv, error) {
	row := q.db.QueryRowContext(ctx, createOhlcv,
		arg.Instrument,
		arg.Epoch,
		arg.Open,
		arg.High,
		arg.Low,
		arg.Close,
		arg.Volume,
		arg.Number,
	)
	var i Ohlcv
	err := row.Scan(
		&i.Instrument,
		&i.Epoch,
		&i.Open,
		&i.High,
		&i.Low,
		&i.Close,
		&i.Volume,
		&i.Number,
	)
	return i, err
}

const delettOhlcv = `-- name: DelettOhlcv :one
DELETE FROM ohlcv
WHERE instrument = $1 AND epoch = $2
RETURNING instrument, epoch, open, high, low, close, volume, number
`

type DelettOhlcvParams struct {
	Instrument int64
	Epoch      time.Time
}

func (q *Queries) DelettOhlcv(ctx context.Context, arg DelettOhlcvParams) (Ohlcv, error) {
	row := q.db.QueryRowContext(ctx, delettOhlcv, arg.Instrument, arg.Epoch)
	var i Ohlcv
	err := row.Scan(
		&i.Instrument,
		&i.Epoch,
		&i.Open,
		&i.High,
		&i.Low,
		&i.Close,
		&i.Volume,
		&i.Number,
	)
	return i, err
}

const listExchanges = `-- name: ListExchanges :many
SELECT id, name FROM exchange
`

func (q *Queries) ListExchanges(ctx context.Context) ([]Exchange, error) {
	rows, err := q.db.QueryContext(ctx, listExchanges)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Exchange
	for rows.Next() {
		var i Exchange
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOhlcv = `-- name: ListOhlcv :many
SELECT instrument, epoch, open, high, low, close, volume, number FROM ohlcv
WHERE Instrument = $1
ORDER BY Epoch DESC
LIMIT $2
`

type ListOhlcvParams struct {
	Instrument int64
	Limit      int32
}

func (q *Queries) ListOhlcv(ctx context.Context, arg ListOhlcvParams) ([]Ohlcv, error) {
	rows, err := q.db.QueryContext(ctx, listOhlcv, arg.Instrument, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ohlcv
	for rows.Next() {
		var i Ohlcv
		if err := rows.Scan(
			&i.Instrument,
			&i.Epoch,
			&i.Open,
			&i.High,
			&i.Low,
			&i.Close,
			&i.Volume,
			&i.Number,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOhlcv = `-- name: UpdateOhlcv :one
UPDATE ohlcv
SET Open = $3, High = $4, Low = $5, Close = $6, Volume = $7, Number = $8
WHERE Instrument = $1 AND Epoch = $2
RETURNING instrument, epoch, open, high, low, close, volume, number
`

type UpdateOhlcvParams struct {
	Instrument int64
	Epoch      time.Time
	Open       string
	High       string
	Low        string
	Close      string
	Volume     string
	Number     int64
}

func (q *Queries) UpdateOhlcv(ctx context.Context, arg UpdateOhlcvParams) (Ohlcv, error) {
	row := q.db.QueryRowContext(ctx, updateOhlcv,
		arg.Instrument,
		arg.Epoch,
		arg.Open,
		arg.High,
		arg.Low,
		arg.Close,
		arg.Volume,
		arg.Number,
	)
	var i Ohlcv
	err := row.Scan(
		&i.Instrument,
		&i.Epoch,
		&i.Open,
		&i.High,
		&i.Low,
		&i.Close,
		&i.Volume,
		&i.Number,
	)
	return i, err
}
